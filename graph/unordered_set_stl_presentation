https://www.geeksforgeeks.org/graph-representations-using-set-hash/

The edge search operation can be further optimized to O(1)



Pros:

    Queries like whether there is an edge from vertex u to vertex v can be done in O(1).
    Adding an edge takes O(1).

Cons:

    Graphs containing parallel edge(s) cannot be implemented through this method.
    Edges are not stored in any order.





#include <bits/stdc++.h> 
using namespace std; 

struct Graph { 
	int V; 
	unordered_set<int>* adjList; 
}; 


Graph* createGraph(int V) 
{ 
	Graph* graph = new Graph; 
	graph->V = V; 
	graph->adjList = new unordered_set<int>[V]; 

	return graph; 
} 


void addEdge(Graph* graph, int src, int dest) 
{ 

	graph->adjList[src].insert(dest); 
	graph->adjList[dest].insert(src); 
} 


void printGraph(Graph* graph) 
{ 
	for (int i = 0; i < graph->V; ++i) { 
		unordered_set<int> lst = graph->adjList[i]; 
		cout << endl << "Adjacency list of vertex "
			<< i << endl; 

		for (auto itr = lst.begin(); itr != lst.end(); ++itr) 
			cout << *itr << " "; 
		cout << endl; 
	} 
} 


void searchEdge(Graph* graph, int src, int dest) 
{ 
	auto itr = graph->adjList[src].find(dest); 
	if (itr == graph->adjList[src].end()) 
		cout << endl << "Edge from " << src 
			<< " to " << dest << " not found."
			<< endl; 
	else
		cout << endl << "Edge from " << src 
			<< " to " << dest << " found."
			<< endl; 
} 

// Driver code 
int main() 
{ 
	// Create the graph given in the above figure 
	int V = 5; 
	struct Graph* graph = createGraph(V); 
	addEdge(graph, 0, 1); 
	addEdge(graph, 0, 4); 
	addEdge(graph, 1, 2); 
	addEdge(graph, 1, 3); 
	addEdge(graph, 1, 4); 
	addEdge(graph, 2, 3); 
	addEdge(graph, 3, 4); 

	// Print the adjacency list representation of 
	// the above graph 
	printGraph(graph); 

	// Search the given edge in the graph 
	searchEdge(graph, 2, 1); 
	searchEdge(graph, 0, 3); 

	return 0; 
} 
