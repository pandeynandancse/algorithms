Merge sort is generally considered better when data is huge and stored in external storage. 


Why MergeSort is preferred over QuickSort for Linked Lists?    --->>>> becoz randomized/direct selection is not allowed in linked list but quick sort requires it.
Why Quick Sort is preferred over MergeSort for sorting Arrays  -->>> because merge sort is not inplace technique and requires O(n) space.

QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. 
There are many different versions of quickSort that pick pivot in different ways.

    Always pick first element as pivot.
    Always pick last element as pivot.
    Pick a random element as pivot.
    Pick median as pivot.


Randomized quick sort : WC : O(n * log n)

BC :  The best case occurs when the partition process always picks the middle element as pivot. -->>  T(n) = 2T(n/2) + O(n)
      O(n * log n)
AC :  T(n) = T(n/9) + T(9n/10) + \theta(n) -->> O(n * log n)
WC : The worst case occurs when the partition process always picks greatest or smallest element as pivot.
     T(n) = T(k) + T(n-k-1) + O(n)  --->>    k is the number of elements which are smaller than pivot.
     O(n * n)
 
 

Illustration of partition : -->> i=-1;  -->> if arr[j] is smaller than pivot then i++ and swap(arr[i],arr[j]) -->>  finally swap(arr[i+1],arr[high])
arr[] = {10, 80, 30, 90, 40, 50, 70}
Indexes:  0   1   2   3   4   5   6 

low = 0, high =  6, pivot = arr[h] = 70
Initialize index of smaller element, i = -1

Traverse elements from j = low to high-1
j = 0 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])
i = 0 
arr[] = {10, 80, 30, 90, 40, 50, 70} // No change as i and j 
                                     // are same

j = 1 : Since arr[j] > pivot, do nothing
// No change in i and arr[]

j = 2 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])
i = 1
arr[] = {10, 30, 80, 90, 40, 50, 70} // We swap 80 and 30 

j = 3 : Since arr[j] > pivot, do nothing
// No change in i and arr[]

j = 4 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])
i = 2
arr[] = {10, 30, 40, 90, 80, 50, 70} // 80 and 40 Swapped
j = 5 : Since arr[j] <= pivot, do i++ and swap arr[i] with arr[j] 
i = 3 
arr[] = {10, 30, 40, 50, 80, 90, 70} // 90 and 50 Swapped 

We come out of loop because j is now equal to high-1.
Finally we place pivot at correct position by swapping
arr[i+1] and arr[high] (or pivot) 
arr[] = {10, 30, 40, 50, 70, 90, 80} // 80 and 70 Swapped 

Now 70 is at its correct place. All elements smaller than
70 are before it and all elements greater than 70 are after
it.





void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) 
    { 
        /* pi is partitioning index, arr[p] is now 
           at right place */
        int pi = partition(arr, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 
  
