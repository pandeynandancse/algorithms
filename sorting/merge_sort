TC : O(n * log n) in all cases


T(n) = 2T(n/2) + O(n)  = O(n * log n) = Master Method


Algorithmic Paradigm: Divide and Conquer
Sorting In Place: No in a typical implementation
Stable: Yes


Merge Sort is useful for sorting linked lists in O(nLogn) time.
Unlike arrays, linked list nodes may not be adjacent in memory. 
In arrays, we can do random access as elements are contiguous in memory. 
Unlike arrays, we can not do random access in the linked list. 
Quick Sort requires a lot of this kind of access.
In linked list to access i’th index, we have to travel each and every node from the head to i’th node as we don’t have a continuous block of memory.
Therefore, the overhead increases for quicksort. Merge sort accesses data sequentially and the need of random access is low. 

void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) 
    { 
 
        int m = l+(r-l)/2; 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 


void merge(int arr[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
 
    int L[n1], R[n2]; 
  
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
  
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
  
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 
  
